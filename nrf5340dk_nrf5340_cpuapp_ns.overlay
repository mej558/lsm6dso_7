// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html

&pinctrl {
    i2c1_default: i2c1_default {
       group1 {
          psels = <NRF_PSEL(TWIM_SDA, 0, 30)>,
             <NRF_PSEL(TWIM_SCL, 0, 31)>;
            //  bias-pull-up;  //yellow squiggle???
       };
    };
    i2c1_sleep: i2c1_sleep {
       group1 {
          psels = <NRF_PSEL(TWIM_SDA, 0, 30)>,
             <NRF_PSEL(TWIM_SCL, 0, 31)>;
                //   low-power-enable; //yellow squiggle???
       };
    };
 };

 &i2c1 {
    compatible = "nordic,nrf-twim";
    // compatible = "i2c-device";
    status = "okay";
    /* default state */
    pinctrl-0 = <&i2c1_default>;
    /* sleep state (only applicable if CONFIG_PM_DEVICE=y) */
    pinctrl-1 = <&i2c1_sleep>;
    /* state assigned to each pinctrl-N property by index */
    pinctrl-names = "default", "sleep";
    clock-frequency = <I2C_BITRATE_STANDARD>;

    lsm6dso32: lsm6dso32@18 {
        compatible = "st,lsm6dso32";
        status = "okay";
        label = "lsm6dso32";
        reg = <0x18>;
    };

   mysensor: mysensor@18{
         compatible = "i2c-device";
         status = "okay";
         reg = < 0x18 >;
   };
 };